services:
  # Redis Message Queue
  redis:
    image: redis:7.2-alpine
    container_name: asterisk-ai-voice-agent-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - ai-voice-network

  # RTPEngine Media Proxy - Temporarily disabled for testing
  # rtpengine:
  #   image: davehorton/rtpengine:latest
  #   container_name: asterisk-ai-voice-agent-rtpengine
  #   command: rtpengine --interface=internal=172.20.0.0/16 --interface=external=0.0.0.0/0 -L 7
  #   ports:
  #     - "2223:2223"  # Control port
  #     - "10000-10100:10000-10100/udp"  # RTP port range
  #   volumes:
  #     - rtpengine_data:/var/spool/rtpengine
  #   restart: unless-stopped
  #   cap_add:
  #     - NET_ADMIN
  #     - SYS_NICE
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:2223/status"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   networks:
  #     - ai-voice-network

  # Call Controller Service
  call_controller:
    build:
      context: .
      dockerfile: services/call_controller/Dockerfile
    container_name: asterisk-ai-voice-agent-call-controller
    network_mode: host
    environment:
      - ASTERISK_HOST=localhost
      - ASTERISK_VERSION=${ASTERISK_VERSION:-16}
      - ARI_USERNAME=${ARI_USERNAME:-AIAgent}
      - ARI_PASSWORD=${ARI_PASSWORD:-c4d5359e2f9ddd394cd6aa116c1c6a96}
      - REDIS_URL=redis://localhost:6379
      - RTPENGINE_HOST=${RTPENGINE_HOST:-rtpengine}
      - RTPENGINE_PORT=${RTPENGINE_PORT:-2223}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEEPGRAM_API_KEY=${DEEPGRAM_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - shared_audio:/shared/audio
      - shared_logs:/shared/logs
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      # rtpengine:
      #   condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:16000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # STT Service
  stt_service:
    build:
      context: .
      dockerfile: services/stt_service/Dockerfile
    container_name: asterisk-ai-voice-agent-stt
    ports:
      - "18001:8001"  # Health check endpoint
      - "5004:5004/udp"  # RTP stream reception
    environment:
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEEPGRAM_API_KEY=${DEEPGRAM_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - shared_audio:/shared/audio
      - shared_logs:/shared/logs
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai-voice-network

  # LLM Service
  llm_service:
    build:
      context: .
      dockerfile: services/llm_service/Dockerfile
    container_name: asterisk-ai-voice-agent-llm
    ports:
      - "18002:8002"  # Health check endpoint
    environment:
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FALLBACK_LLM_MODEL=${FALLBACK_LLM_MODEL:-gpt-3.5-turbo}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - shared_logs:/shared/logs
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai-voice-network

  # TTS Service
  tts_service:
    build:
      context: .
      dockerfile: services/tts_service/Dockerfile
    container_name: asterisk-ai-voice-agent-tts
    ports:
      - "18003:8003"  # Health check endpoint
    environment:
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - shared_audio:/shared/audio
      - shared_logs:/shared/logs
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai-voice-network

volumes:
  redis_data:
    driver: local
  rtpengine_data:
    driver: local
  shared_audio:
    driver: local
  shared_logs:
    driver: local

networks:
  ai-voice-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16