# Asterisk AI Voice Agent - Development Rules

## Project Overview
This is an open-source AI Voice Agent that integrates with Asterisk/FreePBX using SIP/RTP technology (Asterisk 16+) and answers calls using configurable AI providers.

## Development Workflow

### Test Server Configuration
- **Server**: `root@voiprnd.nemtclouddispatch.com`
- **Asterisk Version**: 16+ with FreePBX UI
- **Docker**: Installed and available
- **Access**: SSH with root privileges

### Development Process
1. **Local Development**: All code changes are made locally
2. **Git Workflow**: 
   - Build and test locally
   - Commit changes to Git
   - Push to remote repository
3. **Server Testing**:
   - SSH to test server
   - Pull latest changes from Git
   - Test with Asterisk 16+ environment
   - No direct code changes on server

### Code Standards
- **Python Version**: 3.11+
- **Async Programming**: Use asyncio for all I/O operations
- **Type Hints**: Required for all functions and classes
- **Error Handling**: Comprehensive error handling with logging
- **Testing**: Unit tests for all components

### Project Structure
```
Asterisk-AI-Voice-Agent/
├── src/
│   ├── providers/          # AI provider integrations
│   ├── security/           # Security and compliance
│   ├── monitoring/         # Health checks and metrics
│   ├── sip_client.py       # SIP/RTP integration
│   ├── audio_processor.py  # Audio processing engine
│   ├── config_manager.py   # Configuration management
│   └── engine.py           # Core conversation loop
├── config/
│   └── engine.json         # Default configuration
├── tests/                  # Unit and integration tests
├── docs/                   # Documentation
├── scripts/                # Deployment and utility scripts
├── docker-compose.yml      # Local development
├── Dockerfile              # Container configuration
└── requirements.txt        # Python dependencies
```

### Key Technologies
- **SIP/RTP**: PJSUA2 or aiortc for Asterisk 16+ integration
- **Audio Processing**: WebRTC VAD, RNNoise, SpeexDSP
- **AI Providers**: OpenAI Realtime API, Azure Speech, Deepgram
- **Configuration**: Pydantic v2 for validation
- **Monitoring**: FastAPI for health endpoints
- **Security**: TLS encryption, JWT authentication

### Development Guidelines
1. **Start with SIP Integration**: Focus on getting SIP registration working first
2. **Test Early and Often**: Use the test server for integration testing
3. **Audio Quality First**: Ensure clear audio before adding AI features
4. **Security by Design**: Implement security features from the start
5. **Documentation**: Keep documentation updated with code changes

### Testing Strategy
1. **Local Unit Tests**: Test individual components
2. **Local Integration Tests**: Test with mock Asterisk
3. **Server Integration Tests**: Test with real Asterisk 16+ environment
4. **Performance Tests**: Measure latency and audio quality

### Deployment Process
1. **Local Build**: `docker build -t asterisk-ai-voice-agent .`
2. **Local Test**: `docker run --network host asterisk-ai-voice-agent`
3. **Git Push**: `git add . && git commit -m "message" && git push`
4. **Server Deploy**: SSH to server, pull changes, test with Asterisk

### Environment Variables
- `INTEGRATION_MODE`: `sip` (default)
- `ASTERISK_HOST`: Test server IP/hostname
- `ASTERISK_VERSION`: `16`
- `SIP_EXTENSION`: PJSIP extension number
- `SIP_PASSWORD`: Extension password
- `OPENAI_API_KEY`: OpenAI API key

### Common Commands
```bash
# Local development
docker-compose up --build
docker-compose down

# Git workflow
git add .
git commit -m "feat: add feature description"
git push origin main

# Server testing
ssh root@voiprnd.nemtclouddispatch.com
cd /path/to/project
git pull origin main
docker-compose up --build
```

### Important Notes
- **No Server Changes**: Never modify code directly on the test server
- **Asterisk 16+ Focus**: All development targets Asterisk 16+ compatibility
- **SIP/RTP Primary**: Focus on SIP/RTP integration, AudioSocket is future enhancement
- **Real-time Performance**: Sub-second response times are critical
- **Audio Quality**: Clear audio with noise suppression is essential

### Troubleshooting
- **SIP Registration Issues**: Check Asterisk logs, verify extension configuration
- **Audio Quality Problems**: Test with different codecs, check network latency
- **AI Provider Errors**: Verify API keys, check WebSocket connections
- **Docker Issues**: Ensure host networking is enabled for SIP/RTP

### Security Considerations
- **API Keys**: Never commit API keys to Git
- **Voice Data**: Implement encryption for voice data transmission
- **Access Control**: Use proper authentication and authorization
- **Compliance**: Follow GDPR, HIPAA, CCPA requirements

### Performance Targets
- **Response Time**: <2 seconds for AI responses
- **Audio Latency**: <500ms for real-time processing
- **Uptime**: 99.9% availability
- **CPU Usage**: <80% under normal load
- **Memory Usage**: <2GB per instance
