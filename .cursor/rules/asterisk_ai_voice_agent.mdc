---
description: Development rules and guidelines for the Asterisk AI Voice Agent project
globs: src/**/*.py, tests/**/*.py, *.py, docker-compose.yml, Dockerfile
alwaysApply: true
---

# Asterisk AI Voice Agent - Development Rules

## Project Overview
This is an open-source AI Voice Agent that integrates with Asterisk/FreePBX using SIP/RTP technology (Asterisk 16+) and answers calls using configurable AI providers.

## Development Workflow

### Test Server Configuration
- **Server**: `root@voiprnd.nemtclouddispatch.com`
- **Asterisk Version**: 16+ with FreePBX UI
- **Docker**: Installed and available
- **Access**: SSH with root privileges

### Development Process
1. **Local Development**: All code changes are made locally
2. **Git Workflow**: 
   - Build locally test on server
   - Commit changes to Git
   - Push to remote repository
3. **Server Testing**:
   - SSH to test server
   - Pull latest changes from Git
   - Test with Asterisk 16+ environment
   - No direct code changes on server

### Code Standards
- **Python Version**: 3.11+
- **Async Programming**: Use asyncio for all I/O operations
- **Type Hints**: Required for all functions and classes
- **Error Handling**: Comprehensive error handling with logging
- **Testing**: Unit tests for all components

### Project Structure
```
Asterisk-AI-Voice-Agent/
├── src/
│   ├── providers/          # AI provider integrations
│   ├── security/           # Security and compliance
│   ├── monitoring/         # Health checks and metrics
│   ├── sip_client.py       # SIP/RTP integration
│   ├── audio_processor.py  # Audio processing engine
│   ├── config_manager.py   # Configuration management
│   └── engine.py           # Core conversation loop
├── config/
│   └── engine.json         # Default configuration
├── tests/                  # Unit and integration tests
├── docs/                   # Documentation
├── scripts/                # Deployment and utility scripts
├── docker-compose.yml      # Local development
├── Dockerfile              # Container configuration
└── requirements.txt        # Python dependencies
```

### Key Technologies
- **SIP/RTP**: PJSUA2 or aiortc for Asterisk 16+ integration
- **Audio Processing**: WebRTC VAD, RNNoise, SpeexDSP
- **AI Providers**: OpenAI Realtime API, Azure Speech, Deepgram
- **Configuration**: Pydantic v2 for validation
- **Monitoring**: FastAPI for health endpoints
- **Security**: TLS encryption, JWT authentication

### Development Guidelines
1. **Start with SIP Integration**: Focus on getting SIP registration working first
2. **Test Early and Often**: Use the test server for integration testing
3. **Audio Quality First**: Ensure clear audio before adding AI features
4. **Security by Design**: Implement security features from the start
5. **Documentation**: Keep documentation updated with code changes

### Testing Strategy
**ALL TESTING ON SERVER ONLY - NO LOCAL TESTING**
1. **Server Unit Tests**: Test individual components on server
2. **Server Integration Tests**: Test with real Asterisk 16+ environment
3. **Server Performance Tests**: Measure latency and audio quality on server
4. **Live Testing**: Use final test command when project is complete

### Deployment Process
1. **Local Build**: `docker build -t asterisk-ai-voice-agent .`
2. **Git Push**: `git add . && git commit -m "message" && git push`
3. **Server Deploy**: SSH to server, pull changes, build and test with Asterisk
4. **Server Testing**: All testing performed on server environment only

### Environment Variables
- `INTEGRATION_MODE`: `sip` (default)
- `ASTERISK_HOST`: `voiprnd.nemtclouddispatch.com`
- `ASTERISK_VERSION`: `16`
- `SIP_EXTENSION`: `3000`
- `SIP_PASSWORD`: `AIAgent2025`
- `OPENAI_API_KEY`: `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`
- `DEEPGRAM_API_KEY`: `55f64bf8b7773814ed3840a5d6dd61e512f71d66`

### Testing Configuration
#### Extension Credentials for Testing
- **Extension Number**: 3000
- **Password**: AIAgent2025
- **Verification Command**: `asterisk -rx "pjsip show endpoint 3000"`

#### API Keys for Testing
- **OpenAI API Key**: `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`
- **Deepgram API Key**: `55f64bf8b7773814ed3840a5d6dd61e512f71d66`

#### AI Prompt Configuration
- **AI Role**: Helpful AI Assistant for Jugaar LLC
- **Initial Prompt**: "Hello, I am an AI Assistant for Jugaar LLC. How can I help you today."
- **Instructions**: Answer inbound calls professionally and helpfully

### Common Commands
```bash
# Local development
docker-compose up --build
docker-compose down

# Git workflow
git add .
git commit -m "feat: add feature description"
git push origin main

# Server testing
ssh root@voiprnd.nemtclouddispatch.com
cd /path/to/project
git pull origin main
docker-compose up --build
```

### Testing Commands
```bash
# Verify SIP extension registration
asterisk -rx "pjsip show endpoint 3000"

# Check Asterisk status
asterisk -rx "core show version"
asterisk -rx "pjsip show endpoints"

# Test Docker container
docker run --rm asterisk-voice-agent python -c "import sys; print(f'Python {sys.version}')"

# Test health endpoint
curl -f http://localhost:8000/health

# Monitor Asterisk logs
tail -f /var/log/asterisk/full
```

### Final Testing Command
When the project is complete and ready for live testing, use this command to initiate a test call:

```bash
# Final test call command for live testing
asterisk -rx "channel originate SIP/callcentric/13164619284 extension s@ivr-3"
```

This command will:
- Originate a call from the Callcentric SIP trunk (13164619284)
- Route it to extension `s@ivr-3` (which should be configured to use the AI voice agent)
- Check docker logs and see if call was answered by AI Engine correctly

### Important Notes
- **No Server Changes**: Never modify code directly on the test server
- **Asterisk 16+ Focus**: All development targets Asterisk 16+ compatibility
- **SIP/RTP Primary**: Focus on SIP/RTP integration, AudioSocket is future enhancement
- **Real-time Performance**: Sub-second response times are critical
- **Audio Quality**: Clear audio with noise suppression is essential

### Troubleshooting
- **SIP Registration Issues**: Check Asterisk logs, verify extension configuration
- **Audio Quality Problems**: Test with different codecs, check network latency
- **AI Provider Errors**: Verify API keys, check WebSocket connections
- **Docker Issues**: Ensure host networking is enabled for SIP/RTP

### Security Considerations
- **API Keys**: Never commit API keys to Git
- **Voice Data**: Implement encryption for voice data transmission
- **Access Control**: Use proper authentication and authorization
- **Compliance**: Follow GDPR, HIPAA, CCPA requirements

### Performance Targets
- **Response Time**: <2 seconds for AI responses
- **Audio Latency**: <500ms for real-time processing
- **Uptime**: 99.9% availability
- **CPU Usage**: <80% under normal load
- **Memory Usage**: <2GB per instance

## Asterisk to AI Agent Call Handling

### SDP Format Requirements
The AI agent must send properly formatted SDP responses to Asterisk to avoid parsing errors. Key requirements:

1. **Media Line Format**: Must include payload format numbers in the media line
   ```
   m=audio 15060 RTP/AVP 0 8 9
   ```
   Where:
   - `0` = PCMU (μ-law)
   - `8` = PCMA (A-law) 
   - `9` = G722

2. **Required SDP Attributes**:
   ```
   a=rtpmap:0 PCMU/8000
   a=rtpmap:8 PCMA/8000
   a=rtpmap:9 G722/8000
   a=ptime:20
   a=maxptime:150
   a=sendrecv
   ```

3. **Common SDP Parsing Errors**:
   - `PJMEDIA_SDP_ENOFMT`: Missing payload format in media line
   - Solution: Include payload numbers (0 8 9) in `m=audio` line

### Call State Management
1. **Call Lifecycle States**:
   - `ringing`: Call received, not yet answered
   - `connected`: Call answered, RTP established
   - `ended`: Call terminated, cleanup required

2. **State Transition Rules**:
   - `ringing` → `connected`: After sending 200 OK + ACK
   - `connected` → `ended`: After receiving BYE or timeout
   - `ended` calls must be removed from active_calls to prevent infinite loops

3. **Call Cleanup**:
   - Remove ended calls from active_calls immediately
   - Clean up conversation loops and RTP sockets
   - Send proper BYE responses (200 OK)

### SIP Message Handling
1. **INVITE Processing**:
   - Parse Call-ID, From, To headers
   - Extract SDP for RTP information
   - Send 200 OK with proper SDP format
   - Handle ACK to establish RTP

2. **BYE Processing**:
   - Send 200 OK response to BYE
   - Set call state to "ended"
   - Schedule cleanup after delay

3. **OPTIONS Processing**:
   - Respond to OPTIONS with 200 OK
   - Echo Via, From, To headers from request
   - Keep endpoint "Available" in Asterisk

### RTP Audio Handling
1. **Audio Format**:
   - Use μ-law (PCMU) encoding for telephony
   - 8kHz sample rate
   - 20ms packet intervals

2. **Bidirectional Audio**:
   - Receive RTP from caller (μ-law)
   - Convert to linear PCM for AI processing
   - Convert AI output back to μ-law
   - Send RTP to caller

3. **Keep-Alive**:
   - Send silence packets during conversation
   - Maintain RTP flow to prevent timeouts