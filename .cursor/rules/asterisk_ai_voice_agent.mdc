---
description: Development rules and guidelines for the Asterisk AI Voice Agent v3.0 project
globs: src/**/*.py, *.py, docker-compose.yml, Dockerfile, config/ai-agent.yaml
alwaysApply: true
---

# Asterisk AI Voice Agent v3.0 — Cursor Rules

## GA Scope & Architecture
- Two-container stack (`ai-engine`, `local-ai-server`) with AudioSocket-first capture and automatic fallback to file playback; keep ExternalMedia/RTP as a contingency path only.
- Hybrid ARI flow (`_handle_caller_stasis_start_hybrid`) remains authoritative for call lifecycle; extend handlers rather than bypassing bridge/originate logic.
- SessionStore + ConversationCoordinator + PlaybackManager manage state, gating, and metrics; prefer these interfaces over legacy dictionaries when adding logic.

## Workflow Essentials
- Develop on `develop`, validate locally, then commit and push before any server action; the server at `/root/Asterisk-Agent-Develop` must `git pull` the exact commit before `docker-compose up -d --build`.
- Makefile targets (`make deploy`, `make server-logs`, `make test-local`, etc.) are recommended but optional; if invoking docker-compose directly, always include `--build` for code changes and consider `--no-cache` when behaviour looks stale.
- Never rely on `docker-compose restart` for new code, and do not bypass git by copying files into containers.

## Streaming Transport Guardrails
- Treat `config/ai-agent.yaml` as the source of truth for streaming defaults: `streaming.min_start_ms`, `low_watermark_ms`, `fallback_timeout_ms`, `provider_grace_ms`, `jitter_buffer_ms`, and `barge_in.post_tts_end_protection_ms`.
- `StreamingPlaybackManager` must continue pacing provider frames in 20 ms slices; maintain the jitter buffer warm-up and low-watermark behaviour to avoid restart loops.
- Preserve post-TTS protection and gating tokens so the agent never consumes its own playback; any capture tweaks must respect the guard window and ConversationCoordinator hooks.

## Pipelines & Providers
- Register new adapters through `src/pipelines/orchestrator.py` and expose them in the YAML schema; align examples in `examples/pipelines/*.yaml` and document changes in milestone files.
- Providers must emit metrics/events compatible with existing Prometheus gauges (latency, barge-in, streaming health) and update `/health` readiness fields.
- When adjusting Deepgram or OpenAI settings, keep AudioSocket at μ-law/8 kHz, ensure downstream fallback is functional, and capture findings in `docs/regressions/`.

## Testing & Observability
- Before regressions: clear logs, place an AudioSocket call, verify streaming logs (`AudioSocket connection accepted`, buffer depth, fallback counters), then scrape `/metrics` to archive latency histograms.
- Update `call-framework.md` with call IDs and tuning notes after each test; sync significant changes into `docs/Architecture.md` and `docs/ROADMAP.md`.

## Documentation Hygiene
- Architectural shifts must land in `docs/Architecture.md` first, followed by roadmap and milestone updates; rule files (`Agents.md`, `Gemini.md`, Windsurf, Cursor) stay in lockstep.
- Keep terminology consistent: AudioSocket-first, streaming defaults via YAML, Milestones 5–8 GA scope, `/metrics` snapshots before container restarts.

## GPT-5 Prompting Guidance
- **Precision & consistency**: Align instructions across all IDE rule files; avoid conflicting mandates when editing prompts or workflows.
- **Structured prompts**: Wrap guidance in XML-style blocks, e.g.

  ```xml
  <code_editing_rules>
    <guiding_principles>
      - maintain AudioSocket-first streaming with file fallback
    </guiding_principles>
    <reasoning_effort level="medium"/>
  </code_editing_rules>
  ```

- **Reasoning effort**: Request `high` only for complex streaming/pipeline work; choose medium or low for routine edits to prevent over-analysis.
- **Tone calibration**: Use collaborative language; avoid all-caps or ultimatums that cause GPT-5 to overcorrect.
- **Planning & self-reflection**: Prompt the model with `<self_reflection>` when tackling new features so it sketches a brief plan before coding.
- **Eagerness control**: Bound exploration with tool budgets or `<persistence>` directives, clarifying when to assume reasonable defaults versus re-asking.

Keep this file synchronized with `Agents.md`, `Gemini.md`, and `.windsurf/rules/asterisk_ai_voice_agent.md` whenever guidance changes.
